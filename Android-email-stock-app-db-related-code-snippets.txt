
D:\Data-Windows10\Email-android--com-src\
  \Email-nougat-mr1.2-release\
  \provider_src\com\android\email\provider\EmailProvider.java 
 private static void writeBodyFile(final Context c, final long messageId, final String ext,


View details
 ->strings.xml
 ID= ...
setDateText(
//-refs_heads_nougat-mr1.2-release\src\com\android\mail\browse\MessageHeaderView.java 24%
    private void render(boolean measureOnly) { 
              setDateText(...)

MessageHeaderView

    @VisibleForTesting
    static String makeSnippet(final String messageBody) {

ConversationViewFragment 
 .renderConversation(
    convHtml = renderMessageBodies(messageCursor, mEnableContentReadySignal);
   mWebView.loadDataWithBaseURL(mBaseUri, convHtml, "text/html", "utf-8", null);
	
//D:\...fs_heads_nougat-mr1.2-release\src\com\android\mail\ui\ConversationViewFragment.java 35%
    private void renderConversation(MessageCursor messageCursor) {
        final String convHtml = renderMessageBodies(messageCursor, mEnableContentReadySignal);
        timerMark("rendered conversation");

        if (DEBUG_DUMP_CONVERSATION_HTML) {
            java.io.FileWriter fw = null;
            try {
                fw = new java.io.FileWriter(getSdCardFilePath());
                fw.write(convHtml);
            } catch (java.io.IOException e) {
                e.printStackTrace();
            } finally {
                if (fw != null) {
                    try {
                        fw.close();
                    } catch (java.io.IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        // save off existing scroll position before re-rendering
        if (mWebViewLoadedData) {
            mWebViewYPercent = calculateScrollYPercent();
        }

        mWebView.loadDataWithBaseURL(mBaseUri, convHtml, "text/html", "utf-8", null);
        mWebViewLoadedData = true;
        mWebViewLoadStartMs = SystemClock.uptimeMillis();
    }	

\src\com\android\mail\ui\ConversationViewFragment.java 
protected String renderMessageBodies(MessageCursor messageCursor,
		boolean enableContentReadySignal) {

	while (messageCursor.moveToPosition(++pos)) {
		final ConversationMessage msg = messageCursor.getMessage();

		renderMessage(msg, ExpansionState.isExpanded(expandedState), safeForImages);	

private void renderMessage(ConversationMessage msg, boolean expanded, boolean safeForImages) {	
  mTemplates.appendMessageHtml(msg, expanded, safeForImages,
                mWebView.screenPxToWebPx(headerPx), mWebView.screenPxToWebPx(footerPx));		

private void renderMessage(ConversationMessage msg, boolean expanded, boolean safeForImages) {

        final int headerPos = mAdapter.addMessageHeader(msg, expanded,
                mViewState.getShouldShowImages(msg));
        final MessageHeaderItem headerItem = (MessageHeaderItem) mAdapter.getItem(headerPos);

        final int footerPos = mAdapter.addMessageFooter(headerItem);

        // Measure item header and footer heights to allocate spacers in HTML
        // But since the views themselves don't exist yet, render each item temporarily into
        // a host view for measurement.
        final int headerPx = measureOverlayHeight(headerPos);
        final int footerPx = measureOverlayHeight(footerPos);

        mTemplates.appendMessageHtml(msg, expanded, safeForImages,
                mWebView.screenPxToWebPx(headerPx), mWebView.screenPxToWebPx(footerPx));
        timerMark("rendered message");
    }

\src\com\android\mail\ui\HtmlConversationTemplates.java
public void appendMessageHtml(HtmlMessage message, boolean isExpanded,
            boolean safeForImages, int headerHeight, int footerHeight) {

        final String bodyDisplay = isExpanded ? "block" : "none";
        final String expandedClass = isExpanded ? "expanded" : "";
        final String showImagesClass = safeForImages ? "mail-show-images" : "";

        String body = message.getBodyAsHtml();

srch: getBodyAsHtml

HtmlMessage
/**
 * Interface for appending message-like content into an html
 * document. Used in {@link HtmlConversationTemplates} so that
 * it does not rely on just {@link com.android.mail.providers.Message}.
 */
public interface HtmlMessage {
    public String getBodyAsHtml();
    public boolean embedsExternalResources();
//
multi_permalinks=2610415092301942%2C2610440012299450%2C2607660535910731%2C2608221442521307%2C2608170622526389&notif_id=1562870903810735&notif_t=group_activity&ref=notif 
}

srch: getBodyAsHtml

ConversationMessage message
\src\com\android\mail\ui\SecureConversationViewController.java

    /**
     * Populate the adapter with overlay views (message headers, super-collapsed
     * blocks, a conversation header), and return an HTML document with spacer
     * divs inserted for all overlays.
     */
    public void renderMessage(ConversationMessage message) {
        mMessage = message;

        final boolean alwaysShowImages = mCallbacks.shouldAlwaysShowImages();
        mWebView.getSettings().setBlockNetworkImage(
                !alwaysShowImages && !mMessage.alwaysShowImages);

        // Add formatting to message body
        // At this point, only adds margins.
        StringBuilder dataBuilder = new StringBuilder(
                String.format(BEGIN_HTML, mSideMarginInWebPx));
->       dataBuilder.append(mMessage.getBodyAsHtml());
        dataBuilder.append(END_HTML);

->        mWebView.loadDataWithBaseURL(mCallbacks.getBaseUri(), dataBuilder.toString(),
                "text/html", "utf-8", null);
				
        final MessageHeaderItem item = ConversationViewAdapter.newMessageHeaderItem(
                null, mDateBuilder, mMessage, true, mMessage.alwaysShowImages);
        // Clear out the old info from the header before (re)binding
        mMessageHeaderView.unbind();
        mMessageHeaderView.bind(item, false);

        mSnapHeaderView.unbind();
        mSnapHeaderView.bind(item, false);

        if (mMessage.hasAttachments) {
            mMessageFooterView.setVisibility(View.VISIBLE);
            mMessageFooterView.bind(item, false);
        }
    }

srch: getBodyAsHtml

All file! 	
\src\com\android\mail\providers\Message.java	

